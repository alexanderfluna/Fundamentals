
(defun filter-negatives (number-list)
     (cond ((null number-list) nil)   ;termination condition           
           ((> 0 (car number-list)) 
                 (filter-negatives (cdr number-list)))
           ((t (cons (car number-list)
 		     (filter-negatives (cdr number-list))))) 		     
           ))
(defun filter-negatives (number-list)
     (cond ((null number-list) nil)   ;termination condition           
           ((> 0 (car number-list)) 
                 (filter-negatives (cdr number-list)))
           (t (cons (car number-list)
 		     (filter-negatives (cdr number-list))))
 ))
(filter-negatives '(1 -2 3 -4 5 0 6))

;count the atoms at the top level list
(defun count-atoms_top (list)

  (cond ((null list) 0)
        ((atom (car list)) (+ 1 (count-atoms_top (cdr list))) )
        (t (count-atoms_top (cdr list)))
   )
 )
 (count-atoms_top '(1 (-2 (3) -4) 5 (0 6))))
 (count-atoms_top 1)
 
 
 
 ; redefinition of function member to searcj for an atom in all levels of the list
 (defun member (element list)
    (cond ((null list) nil)         ;element not in list
          ((atom (car list))
             (cond ((equal element (car list)) list)  ; found
                   (t (member element (cdr list)))              
             )
          );
          ((cond ((member element (car list)) 
                     (cons (member element (car list)) (cdr list)))       
                (t (member element (cdr list)))
          ))
    )
 )

(member 4 '())

(member 4 '(1 3 4 7))

(member 2 '(1 3 4 7))

(member 1 '((1) 3 4 7))

(member 1 '( 3 3 (1) 3 4 7))


  